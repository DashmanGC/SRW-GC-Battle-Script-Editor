/*
 * Copyright (C) 2014 Dashman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * PanelBLine.java
 *
 * Created on 15-jul-2014, 19:08:52
 */

package srwgcbattlescripteditor;

import java.awt.Color;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jonatan
 */
public class PanelBLine extends javax.swing.JPanel {

    boolean sjis = true;
    String font_encoding = "MS932";

    /** Creates new form PanelBLine */
    public PanelBLine() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelCharacter = new javax.swing.JLabel();
        labelCharName = new javax.swing.JLabel();
        labelID = new javax.swing.JLabel();
        labelCharID = new javax.swing.JLabel();
        labelPortrait = new javax.swing.JLabel();
        labelPorID = new javax.swing.JLabel();
        labelVoice = new javax.swing.JLabel();
        labelVoiceID = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        labelActionStatus = new javax.swing.JLabel();
        labelOriginal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textareaOriginal = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textareaEdit = new javax.swing.JTextArea();
        labelEdited = new javax.swing.JLabel();
        labelWidthTotal = new javax.swing.JLabel();
        labelPixelsUsed = new javax.swing.JLabel();
        labelWidthCurrent = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelCharacter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelCharacter.setText("Character:");

        labelCharName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelCharName.setForeground(new java.awt.Color(51, 153, 255));
        labelCharName.setText("No data");

        labelID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelID.setText("ID:");

        labelCharID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelCharID.setForeground(new java.awt.Color(0, 204, 255));
        labelCharID.setText("000");

        labelPortrait.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelPortrait.setText("Portrait:");

        labelPorID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelPorID.setForeground(new java.awt.Color(0, 204, 255));
        labelPorID.setText("000");

        labelVoice.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelVoice.setText("Voice ID:");

        labelVoiceID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelVoiceID.setForeground(new java.awt.Color(204, 0, 255));
        labelVoiceID.setText("0000");

        labelStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelStatus.setText("Status:");

        labelActionStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelActionStatus.setForeground(new java.awt.Color(255, 102, 0));
        labelActionStatus.setText("NO ACTION");

        labelOriginal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelOriginal.setText("Original");

        textareaOriginal.setColumns(20);
        textareaOriginal.setRows(4);
        jScrollPane1.setViewportView(textareaOriginal);

        textareaEdit.setColumns(20);
        textareaEdit.setRows(4);
        textareaEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textareaEditKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(textareaEdit);

        labelEdited.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelEdited.setText("Edited");

        labelWidthTotal.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelWidthTotal.setText("/ 324");

        labelPixelsUsed.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelPixelsUsed.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelPixelsUsed.setText("Pixels in use:");

        labelWidthCurrent.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWidthCurrent.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelWidthCurrent.setText("???");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelCharID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(labelCharacter, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelPortrait, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelPorID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelVoice, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelVoiceID, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelActionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelCharName, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelOriginal))
                            .addGap(16, 16, 16)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelEdited)
                                .addComponent(jScrollPane2)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPixelsUsed, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(labelWidthCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(labelWidthTotal)
                            .addGap(97, 97, 97))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCharacter)
                    .addComponent(labelCharName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelID)
                    .addComponent(labelCharID)
                    .addComponent(labelPortrait)
                    .addComponent(labelPorID)
                    .addComponent(labelVoice)
                    .addComponent(labelVoiceID)
                    .addComponent(labelStatus)
                    .addComponent(labelActionStatus))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelOriginal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelEdited)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelWidthTotal)
                    .addComponent(labelWidthCurrent)
                    .addComponent(labelPixelsUsed))
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textareaEditKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textareaEditKeyTyped
        // TODO add your handling code here:
        if (sjis)
            filterKeys((javax.swing.JTextArea)evt.getComponent(), evt);
        
        writeWidth();
    }//GEN-LAST:event_textareaEditKeyTyped


    public void setCharacter(int id){
        labelCharName.setText(getName(id));
        labelCharID.setText(get3Digits(id));
    }

    
    public void setPortrait(int id){
        labelPorID.setText(get3Digits(id));
    }


    public void setVoice(int id){
        if (id != -1)
            labelVoiceID.setText(get4Digits(id));
        else
            labelVoiceID.setText("NO");
    }


    public void setStatus(int status){
        if (status == 1){
            labelActionStatus.setText("NO ACTION");
            labelActionStatus.setForeground(new Color(255, 102, 51));
        }
        else if (status == 2){
            labelActionStatus.setText("ACTION");
            labelActionStatus.setForeground(new Color(0, 220, 0));
        }
        else{
            labelActionStatus.setText("UNKNOWN");
            labelActionStatus.setForeground(new Color(220, 220, 220));
        }
    }


    public void setOriginalText(String text){
        textareaOriginal.setText(text);
    }


    public void setEditText(String text){
        textareaEdit.setText(text);
    }


    public void setSJIS(boolean enabled){
        sjis = enabled;
    }


    public String getEditText(){
        return textareaEdit.getText();
    }


    private String get3Digits(int num){
        String result = "";

        if (num > 99){
            result += num;
        }
        else if (num > 9){
            result += "0" + num;
        }
        else{
            result += "00" + num;
        }

        return result;
    }


    private String get4Digits(int num){
        String result = "";

        if (num > 999){
            result += num;
        }
        else if (num > 99){
            result += "0" + num;
        }
        else if (num > 9){
            result += "00" + num;
        }
        else{
            result += "000" + num;
        }

        return result;
    }


    // Changes your typed character in JTextArea t to its SJIS version
    public void filterKeys(javax.swing.JTextArea t, java.awt.event.KeyEvent e){
        char original_char = e.getKeyChar();
        boolean change = false;

        byte[] sjis_char = charToSJIS(original_char);
        if (sjis_char[0] != 0)
            change = true;

        if (change){
            try {
                t.replaceSelection(""); // Cleans the selected text
                e.consume();
                int pos = t.getCaretPosition();
                String text = t.getText();
                String new_char = new String(sjis_char, font_encoding);
                //System.out.println("caret: " + pos + " length: " + text.length());
                if (pos == 0)
                    text = new_char + t.getText();
                else if (pos == text.length())
                    text = t.getText() + new_char;
                else
                    text = text.substring(0, pos) + new_char + text.substring(pos, text.length());
                //String text = textfieldTest.getText() + new String(sjis_char, "Shift-JIS");
                t.setText(text);
                t.setCaretPosition(pos + 1);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(PanelBLine.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    public byte[] charToSJIS(char c){
        /*
            0 = 48 -> 82 4f
            9 = 57 -> 82 58

            A = 65 -> 82 60
            Z = 90 -> 82 79

            a = 97 -> 82 81
            z = 122 -> 82 9a

            space -> 81 40
            , -> 81 41
            . -> 81 42
         */
        byte[] Jap_char = new byte[2];
        Jap_char[0] = (byte) 0x82;
        if (c >= 'a' && c <= 'z'){
            Jap_char[1] = (byte) 0x81;
            Jap_char[1] += c - 'a';
        }
        else if (c >= 'A' && c <= 'Z'){
            Jap_char[1] = (byte) 0x60;
            Jap_char[1] += c - 'A';
        }
        else if (c >= '0' && c <= '9'){
            Jap_char[1] = (byte) 0x4f;
            Jap_char[1] += c - '0';
        }
        else{ // Check if it's a special character
            int code = c;
            Jap_char[0] = (byte) 0x81;
            switch (code){
                case 32: // space = 32 -> 81 40
                    Jap_char[1] = (byte) 0x40;
                    break;
                case 33: // ! = 33 -> 81 49
                    Jap_char[1] = (byte) 0x49;
                    break;
                case 34: // " = 34 -> 81 8d
                    Jap_char[1] = (byte) 0x8d;
                    break;
                case 35: // # = 35 -> 81 94
                    Jap_char[1] = (byte) 0x94;
                    break;
                case 37: // % = 37 -> 81 93
                    Jap_char[1] = (byte) 0x93;
                    break;
                case 38: // & = 38 -> 81 95
                    Jap_char[1] = (byte) 0x95;
                    break;
                case 39: // ' = 39 -> 81 8c
                    Jap_char[1] = (byte) 0x8c;
                    break;
                case 40: // ( = 40 -> 81 69
                    Jap_char[1] = (byte) 0x69;
                    break;
                case 41: // ) = 41 -> 81 6a
                    Jap_char[1] = (byte) 0x6a;
                    break;
                case 42: // * = 42 -> 81 96
                    Jap_char[1] = (byte) 0x96;
                    break;
                case 43: // + = 43 -> 81 7b
                    Jap_char[1] = (byte) 0x7b;
                    break;
                case 44: // , = 44 -> 81 43
                    Jap_char[1] = (byte) 0x43;
                    break;
                case 45: // - = 45 -> 81 7c
                    Jap_char[1] = (byte) 0x7c;
                    break;
                case 46: // . = 46 -> 81 44
                    Jap_char[1] = (byte) 0x44;
                    break;
                case 47: // / = 47 -> 81 5e
                    Jap_char[1] = (byte) 0x5e;
                    break;
                case 58: // : = 58 -> 81 46
                    Jap_char[1] = (byte) 0x46;
                    break;
                case 59: // ; = 59 -> 81 47
                    Jap_char[1] = (byte) 0x47;
                    break;
                case 60: // < = 60 -> 81 83
                    Jap_char[1] = (byte) 0x83;
                    break;
                case 61: // = = 61 -> 81 81
                    Jap_char[1] = (byte) 0x81;
                    break;
                case 62: // > = 62 -> 81 84
                    Jap_char[1] = (byte) 0x84;
                    break;
                case 63: // ? = 63 -> 81 48
                    Jap_char[1] = (byte) 0x48;
                    break;
                case 64: // @ = 64 -> 81 97
                    Jap_char[1] = (byte) 0x97;
                    break;
                default:
                    Jap_char[0] = 0;
                    Jap_char[1] = 0;
            }
        }
        return Jap_char;
    }


    public void convertToSJIS(){
        String text = textareaEdit.getText();
        String newText = "";

        for (int i = 0; i < text.length(); i++){
            char c = text.charAt(i);
            byte[] sjis_char = charToSJIS(c);

            if (sjis_char[0] != 0){
                try {
                    String new_char = new String(sjis_char, font_encoding);

                    newText += new_char;
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(PanelBLine.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else{
                newText += c;
            }
        }

        textareaEdit.setText(newText);
    }


    private String getName(int id){
        String name = "";

        switch (id){
            case 0:
                name = "No data";
                break;

            case 1:
                name = "Amuro";
                break;

            case 2:
                name = "Sayla";
                break;

            case 3:
                name = "Kai";
                break;

            case 4:
                name = "Hayato";
                break;

            case 5:
                name = "Ryu";
                break;

            case 6:
                name = "Sleggar";
                break;

            case 7:
                name = "Bright";
                break;

            case 13:
                name = "Watkein";
                break;

            case 51:
                name = "Char";
                break;

            case 52:
                name = "Char (Ship's captain)";
                break;

            case 53:
                name = "Lalah";
                break;

            case 54:
                name = "Ramba Ral";
                break;

            case 55:
                name = "Hamon";
                break;

            case 56:
                name = "Tachi";
                break;

            case 57:
                name = "Clamp";
                break;

            case 58:
                name = "Acous";
                break;

            case 59:
                name = "Cozun";
                break;

            case 60:
                name = "Gaia";
                break;

            case 61:
                name = "Ortega";
                break;

            case 62:
                name = "Mash";
                break;

            case 63:
                name = "Conscon";
                break;

            case 64:
                name = "M'Quve";
                break;

            case 65:
                name = "Denim";
                break;

            case 66:
                name = "Gene";
                break;

            case 67:
                name = "Slender";
                break;

            case 68:
                name = "Crown";
                break;

            case 70:
                name = "Gihren";
                break;

            case 71:
                name = "Garma";
                break;

            case 72:
                name = "Kycilia";
                break;

            case 73:
                name = "Dozle";
                break;

            case 74:
                name = "Dren";
                break;

            case 76:
                name = "Fed. Officer";
                break;

            case 77:
                name = "Fed. Soldier";
                break;

            case 78:
                name = "Zeon Officer";
                break;

            case 79:
                name = "Zeon Soldier";
                break;

            case 82:
                name = "Tokwan";
                break;

            case 100:
                name = "Shiro";
                break;

            case 101:
                name = "Sanders";
                break;

            case 102:
                name = "Karen";
                break;

            case 103:
                name = "Michel";
                break;

            case 104:
                name = "Eledore";
                break;

            case 109:
                name = "Aina";
                break;

            case 110:
                name = "Ginias";
                break;

            case 111:
                name = "Norris";
                break;

            case 120:
                name = "Bernie";
                break;

            case 121:
                name = "Chris";
                break;

            case 123:
                name = "Steiner";
                break;

            case 124:
                name = "Misha";
                break;

            case 125:
                name = "Garcia";
                break;

            case 126:
                name = "Andy";
                break;

            case 130:
                name = "Kamille";
                break;

            case 131:
                name = "Fa";
                break;

            case 132:
                name = "Quattro";
                break;

            case 133:
                name = "Emma";
                break;

            case 135:
                name = "Haman";
                break;

            case 136:
                name = "Four";
                break;

            case 137:
                name = "Unused?";
                break;

            case 140:
                name = "Judau";
                break;

            case 142:
                name = "Elle";
                break;

            case 143:
                name = "Roux";
                break;

            case 144:
                name = "Beecha";
                break;

            case 145:
                name = "Mondo";
                break;

            case 146:
                name = "Iino";
                break;

            case 147:
                name = "Puru";
                break;

            case 148:
                name = "Puru Two";
                break;

            case 149:
                name = "Rommel";
                break;

            case 150:
                name = "Rakan";
                break;

            case 154:
                name = "Unused?";
                break;

            case 155:
                name = "Unused?";
                break;

            case 156:
                name = "Unused?";
                break;

            case 200:
                name = "Kouji Kabuto";
                break;

            case 201:
                name = "Tetsuya";
                break;

            case 202:
                name = "Sayaka";
                break;

            case 203:
                name = "Jun";
                break;

            case 204:
                name = "Boss";
                break;

            case 205:
                name = "Nuke";
                break;

            case 206:
                name = "Mucha";
                break;

            case 209:
                name = "Dr. Hell";
                break;

            case 210:
                name = "Baron Ashura";
                break;

            case 211:
                name = "Baron Ashura (Captain)";
                break;

            case 215:
                name = "??? (Kouji)";
                break;

            case 220:
                name = "Gou";
                break;

            case 222:
                name = "Shou";
                break;

            case 223:
                name = "Gai";
                break;

            case 229:
                name = "Jack";
                break;

            case 230:
                name = "Mary";
                break;

            case 231:
                name = "Gore";
                break;

            case 232:
                name = "General Bat";
                break;

            case 233:
                name = "General Galilei";
                break;

            case 234:
                name = "Neon";
                break;

            case 235:
                name = "Dinosaur soldier";
                break;

            case 240:
                name = "Kento";
                break;

            case 242:
                name = "Danji";
                break;

            case 244:
                name = "Beralios";
                break;

            case 252:
                name = "Gascon";
                break;

            case 253:
                name = "Emperor Dolmen";
                break;

            case 254:
                name = "Kloppen";
                break;

            case 256:
                name = "General Kabuto";
                break;

            case 257:
                name = "General Voider";
                break;

            case 258:
                name = "General Nessia";
                break;

            case 265:
                name = "Mito";
                break;

            case 267:
                name = "Skade";
                break;

            case 269:
                name = "Kirks";
                break;

            case 276:
                name = "Baljan";
                break;

            case 277:
                name = "Bardland Soldier";
                break;

            case 281:
                name = "Lord Bardland";
                break;

            case 282:
                name = "Desban";
                break;

            case 285:
                name = "Unused?";
                break;

            case 290:
                name = "Shinobu";
                break;

            case 291:
                name = "Sara";
                break;

            case 292:
                name = "Ryou";
                break;

            case 293:
                name = "Masato";
                break;

            case 294:
                name = "Prof. Hazuki";
                break;

            case 296:
                name = "Alan";
                break;

            case 300:
                name = "Shapiro";
                break;

            case 301:
                name = "Deathgaia";
                break;

            case 303:
                name = "Gildorome";
                break;

            case 305:
                name = "Helmat";
                break;

            case 307:
                name = "Muge Zorbados";
                break;

            case 309:
                name = "Muge Soldier";
                break;

            case 310:
                name = "Muge Soldier B?";
                break;

            case 311:
                name = "Muge Officer";
                break;

            case 312:
                name = "Muge Combat AI";
                break;

            case 320:
                name = "Daba";
                break;

            case 321:
                name = "Lilith";
                break;

            case 322:
                name = "Kyao";
                break;

            case 324:
                name = "Amu";
                break;

            case 326:
                name = "Leccee";
                break;

            case 327:
                name = "Gablae";
                break;

            case 331:
                name = "Semuj";
                break;

            case 332:
                name = "Poseydal";
                break;

            case 333:
                name = "Giwaza";
                break;

            case 334:
                name = "Nei";
                break;

            case 335:
                name = "Anton";
                break;

            case 336:
                name = "Heckler";
                break;

            case 337:
                name = "McTomin";
                break;

            case 338:
                name = "Quwasan";
                break;

            case 339:
                name = "Ryocklay";
                break;

            case 341:
                name = "Amandara (true)";
                break;

            case 343:
                name = "Chai Char";
                break;

            case 344:
                name = "Hasha";
                break;

            case 345:
                name = "Poseydal Soldier A";
                break;

            case 346:
                name = "Poseydal Officer";
                break;

            case 347:
                name = "Resistance A";
                break;

            case 351:
                name = "Resistance B";
                break;

            case 364:
                name = "Poseydal Soldier B";
                break;

            case 370:
                name = "Eiji";
                break;

            case 371:
                name = "Rei";
                break;

            case 374:
                name = "David";
                break;

            case 377:
                name = "Simone";
                break;

            case 381:
                name = "Gosterro";
                break;

            case 382:
                name = "Manjero";
                break;

            case 383:
                name = "Bohn";
                break;

            case 384:
                name = "Getty";
                break;

            case 385:
                name = "Le Caine";
                break;

            case 387:
                name = "Grados Soldier A";
                break;

            case 388:
                name = "Grados Officer";
                break;

            case 390:
                name = "Guerrilla A";
                break;

            case 391:
                name = "Guerrilla B";
                break;

            case 392:
                name = "Grados Soldier B";
                break;

            case 400:
                name = "Kaine";
                break;

            case 401:
                name = "Tapp";
                break;

            case 402:
                name = "Light";
                break;

            case 409:
                name = "Meio";
                break;

            case 410:
                name = "Dan";
                break;

            case 411:
                name = "Karl";
                break;

            case 412:
                name = "Welner";
                break;

            case 413:
                name = "Gun Jem";
                break;

            case 414:
                name = "Min";
                break;

            case 415:
                name = "Gol";
                break;

            case 416:
                name = "Ganan";
                break;

            case 417:
                name = "Jin (Dragonar)";
                break;

            case 418:
                name = "Dorchenov";
                break;

            case 420:
                name = "Fed. Soldier (Dragonar)";
                break;

            case 421:
                name = "Giganos Soldier A";
                break;

            case 424:
                name = "Giganos Soldier (augmented)";
                break;

            case 425:
                name = "Giganos Soldier B";
                break;

            case 430:
                name = "Jin";
                break;

            case 431:
                name = "Asuka";
                break;

            case 432:
                name = "Kouji";
                break;

            case 433:
                name = "Maria";
                break;

            case 434:
                name = "Cookie";
                break;

            case 436:
                name = "Hidenori";
                break;

            case 437:
                name = "Tsutomu";
                break;

            case 438:
                name = "Love";
                break;

            case 441:
                name = "Daisuke";
                break;

            case 442:
                name = "Yoppa";
                break;

            case 447:
                name = "Potato";
                break;

            case 448:
                name = "Mr. Shinoda";
                break;

            case 449:
                name = "Miss Himeki";
                break;

            case 451:
                name = "Akudama";
                break;

            case 452:
                name = "Belzeb";
                break;

            case 453:
                name = "Falzeb";
                break;

            case 454:
                name = "Taida";
                break;

            case 455:
                name = "Warusa";
                break;

            case 457:
                name = "Bakuryuu Oh";
                break;

            case 458:
                name = "Bakuryuu Dragon";
                break;

            case 460:
                name = "Kid";
                break;

            case 461:
                name = "Bowie";
                break;

            case 462:
                name = "Omachi";
                break;

            case 463:
                name = "Isaac";
                break;

            case 464:
                name = "Poncho";
                break;

            case 465:
                name = "Khamen";
                break;

            case 466:
                name = "Nubia Cultist A";
                break;

            case 468:
                name = "Nubia Cultist B";
                break;

            case 469:
                name = "Nubia Cultist C";
                break;

            case 470:
                name = "Nubia Cultist D";
                break;

            case 471:
                name = "Nubia Cultist E";
                break;

            case 472:
                name = "Nubia Cultist F";
                break;

            case 473:
                name = "Nubia Cultist G";
                break;

            case 474:
                name = "Nubia Cultist H";
                break;

            case 475:
                name = "Diego";
                break;

            case 476:
                name = "Stecken";
                break;

            case 477:
                name = "Shirou";
                break;

            case 478:
                name = "Laila";
                break;

            case 479:
                name = "Sama";
                break;

            case 480:
                name = "Three J";
                break;

            case 483:
                name = "Kei Maron";
                break;

            case 484:
                name = "Ozma";
                break;

            case 485:
                name = "Gowahand Soldier A";
                break;

            case 486:
                name = "Gowahand Officer";
                break;

            case 487:
                name = "Longoo Soldier A";
                break;

            case 488:
                name = "Longoo Officer";
                break;

            case 497:
                name = "Gowahand Soldier B";
                break;

            case 498:
                name = "Longoo Soldier B";
                break;

            case 500:
                name = "Blues";
                break;

            case 501:
                name = "Rock";
                break;

            case 502:
                name = "Beat";
                break;

            case 503:
                name = "Birdy";
                break;

            case 505:
                name = "D.D.";
                break;

            case 515:
                name = "Watta";
                break;

            case 516:
                name = "Kakikouji";
                break;

            case 517:
                name = "Ikue";
                break;

            case 518:
                name = "Atsui";
                break;

            case 519:
                name = "Kinoshita";
                break;

            case 526:
                name = "Zakron";
                break;

            case 528:
                name = "Jilva";
                break;

            case 529:
                name = "Fairey (Gardisord suit)";
                break;

            case 530:
                name = "Akimi (male)";
                break;

            case 531:
                name = "Akimi (female)";
                break;

            case 532:
                name = "Fairey";
                break;

            case 535:
                name = "Herluga";
                break;

            case 536:
                name = "Vought";
                break;

            case 537:
                name = "Sieg";
                break;

            case 538:
                name = "Sally";
                break;

            case 539:
                name = "Regianne";
                break;

            case 543:
                name = "UNUSED! - Interrupt game lines!";
                break;

            case 546:
                name = "Mechabeast AI";
                break;

            case 547:
                name = "Mecharobot AI";
                break;

            case 551:
                name = "Advanced AI?";
                break;

            case 552:
                name = "Bemborg AI?";
                break;

            case 553:
                name = "UNKNOWN";
                break;

            default:
                name = "No data";
        }

        return name;
    }


    public void writeWidth(){
        int width = 0;

        String text = textareaEdit.getText();

        if (!text.isEmpty()){
            String[] lines = text.split("\n");

            for (int i = 0; i < lines.length; i++){
                int line_size = 0;
                //line_size = lines[i].length() * 18; // Each character is 18x18 in the original
                for (int j = 0; j < lines[i].length(); j++){
                    char c = lines[i].charAt(j);
                    if (c < '　')   // Empty space in SJIS, pretty much the first possible character in SJIS
                        line_size += 10;    // We add the width of an ASCII character
                    else
                        line_size += VWF(c);    // We add the width of a SJIS character
                }

                if (line_size > width)
                    width = line_size;
            }
        }

        labelWidthCurrent.setText("" + width);
        if (width > 324)
            labelWidthCurrent.setForeground(new Color(255, 0, 0));
        else
            labelWidthCurrent.setForeground(new Color(0, 0, 0));
    }

    public int VWF(char c){
        int width = 18;

        switch (c){
            case '　':
                width = 6;
                break;
            case '，':
                width = 5;
                break;
            case '．':
                width = 4;
                break;
            case '：':
                width = 4;
                break;
            case '；':
                width = 5;
                break;
            case '？':
                width = 9;
                break;
            case '！':
                width = 4;
                break;
            case '‐':
                width = 7;
                break;
            case '／':
                width = 10;
                break;
            case '＼':
                width = 9;
                break;

            case '～':
                width = 10;
                break;
            case '（':
                width = 6;
                break;
            case '）':
                width = 6;
                break;
            case '［':
                width = 6;
                break;
            case '］':
                width = 6;
                break;
            case '｛':
                width = 8;
                break;
            case '｝':
                width = 8;
                break;
            case '＋':
                width = 10;
                break;
            case '－':
                width = 7;
                break;
            case '±':
                width = 10;
                break;

            case '＜':
                width = 10;
                break;
            case '＞':
                width = 10;
                break;
            case '′':
                width = 4;
                break;
            case '″':
                width = 8;
                break;
            case '％':
                width = 12;
                break;
            case '＃':
                width = 10;
                break;
            case '＆':
                width = 9;
                break;
            case '＊':
                width = 8;
                break;
            case '＠':
                width = 10;
                break;
            case '０':
                width = 9;
                break;

            case '１':
                width = 9;
                break;
            case '２':
                width = 9;
                break;
            case '３':
                width = 9;
                break;
            case '４':
                width = 9;
                break;
            case '５':
                width = 9;
                break;
            case '６':
                width = 9;
                break;
            case '７':
                width = 9;
                break;
            case '８':
                width = 9;
                break;
            case '９':
                width = 9;
                break;
            case 'Ａ':
                width = 9;
                break;

            case 'Ｂ':
                width = 9;
                break;
            case 'Ｃ':
                width = 8;
                break;
            case 'Ｄ':
                width = 9;
                break;
            case 'Ｅ':
                width = 9;
                break;
            case 'Ｆ':
                width = 9;
                break;
            case 'Ｇ':
                width = 9;
                break;
            case 'Ｈ':
                width = 9;
                break;
            case 'Ｉ':
                width = 8;
                break;
            case 'Ｊ':
                width = 9;
                break;
            case 'Ｋ':
                width = 9;
                break;

            case 'Ｌ':
                width = 9;
                break;
            case 'Ｍ':
                width = 9;
                break;
            case 'Ｎ':
                width = 9;
                break;
            case 'Ｏ':
                width = 9;
                break;
            case 'Ｐ':
                width = 9;
                break;
            case 'Ｑ':
                width = 9;
                break;
            case 'Ｒ':
                width = 9;
                break;
            case 'Ｓ':
                width = 9;
                break;
            case 'Ｔ':
                width = 9;
                break;
            case 'Ｕ':
                width = 9;
                break;

            case 'Ｖ':
                width = 9;
                break;
            case 'Ｗ':
                width = 10;
                break;
            case 'Ｘ':
                width = 9;
                break;
            case 'Ｙ':
                width = 8;
                break;
            case 'Ｚ':
                width = 9;
                break;
            case 'ａ':
                width = 9;
                break;
            case 'ｂ':
                width = 9;
                break;
            case 'ｃ':
                width = 8;
                break;
            case 'ｄ':
                width = 9;
                break;
            case 'ｅ':
                width = 9;
                break;

            case 'ｆ':
                width = 9;
                break;
            case 'ｇ':
                width = 9;
                break;
            case 'ｈ':
                width = 9;
                break;
            case 'ｉ':
                width = 4;
                break;
            case 'ｊ':
                width = 6;
                break;
            case 'ｋ':
                width = 8;
                break;
            case 'ｌ':
                width = 4;
                break;
            case 'ｍ':
                width = 10;
                break;
            case 'ｎ':
                width = 9;
                break;
            case 'ｏ':
                width = 9;
                break;

            case 'ｐ':
                width = 9;
                break;
            case 'ｑ':
                width = 9;
                break;
            case 'ｒ':
                width = 9;
                break;
            case 'ｓ':
                width = 9;
                break;
            case 'ｔ':
                width = 9;
                break;
            case 'ｕ':
                width = 9;
                break;
            case 'ｖ':
                width = 9;
                break;
            case 'ｗ':
                width = 10;
                break;
            case 'ｘ':
                width = 8;
                break;
            case 'ｙ':
                width = 9;
                break;

            case 'ｚ':
                width = 9;
                break;
            case 'Ω':
                width = 10;
                break;
            case 'α':
                width = 9;
                break;
            case 'β':
                width = 9;
                break;
            case 'γ':
                width = 10;
                break;
            case 'ν':
                width = 9;
                break;
            case 'Ι':
                width = 5;
                break;
            case 'П':
                width = 8;
                break;
            case 'Ш':
                width = 11;
                break;
            case 'Ю':
                width = 10;
                break;
        }

        return width;
    }

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelActionStatus;
    private javax.swing.JLabel labelCharID;
    private javax.swing.JLabel labelCharName;
    private javax.swing.JLabel labelCharacter;
    private javax.swing.JLabel labelEdited;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelOriginal;
    private javax.swing.JLabel labelPixelsUsed;
    private javax.swing.JLabel labelPorID;
    private javax.swing.JLabel labelPortrait;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelVoice;
    private javax.swing.JLabel labelVoiceID;
    private javax.swing.JLabel labelWidthCurrent;
    private javax.swing.JLabel labelWidthTotal;
    private javax.swing.JTextArea textareaEdit;
    private javax.swing.JTextArea textareaOriginal;
    // End of variables declaration//GEN-END:variables

}
